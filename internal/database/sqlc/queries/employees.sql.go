// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employees.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
insert into employees (
    name,
    dob,
    department,
    job_title,
    address,
    joined_at
)
values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
returning id, name, dob, department, job_title, address, joined_at, created_at, updated_at, department_id
`

type CreateEmployeeParams struct {
	Name       string      `db:"name"`
	Dob        pgtype.Date `db:"dob"`
	Department string      `db:"department"`
	JobTitle   string      `db:"job_title"`
	Address    string      `db:"address"`
	JoinedAt   time.Time   `db:"joined_at"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (*Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.Name,
		arg.Dob,
		arg.Department,
		arg.JobTitle,
		arg.Address,
		arg.JoinedAt,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Department,
		&i.JobTitle,
		&i.Address,
		&i.JoinedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
	)
	return &i, err
}

const deleteEmployee = `-- name: DeleteEmployee :one
delete from employees
where id = $1
returning id
`

func (q *Queries) DeleteEmployee(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteEmployee, id)
	err := row.Scan(&id)
	return id, err
}

const getAllEmployee = `-- name: GetAllEmployee :many
select id, name, dob, department, job_title, address, joined_at, created_at, updated_at, department_id from employees
`

func (q *Queries) GetAllEmployee(ctx context.Context) ([]*Employee, error) {
	rows, err := q.db.Query(ctx, getAllEmployee)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dob,
			&i.Department,
			&i.JobTitle,
			&i.Address,
			&i.JoinedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DepartmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEmployeeByDepartmentID = `-- name: GetAllEmployeeByDepartmentID :many
select id, name, dob, department, job_title, address, joined_at, created_at, updated_at, department_id
from employees
where department_id = $1
`

func (q *Queries) GetAllEmployeeByDepartmentID(ctx context.Context, departmentID pgtype.Text) ([]*Employee, error) {
	rows, err := q.db.Query(ctx, getAllEmployeeByDepartmentID, departmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dob,
			&i.Department,
			&i.JobTitle,
			&i.Address,
			&i.JoinedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DepartmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeeById = `-- name: GetEmployeeById :one
select id, name, dob, department, job_title, address, joined_at, created_at, updated_at, department_id from employees
where id = $1
`

func (q *Queries) GetEmployeeById(ctx context.Context, id uuid.UUID) (*Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeById, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Department,
		&i.JobTitle,
		&i.Address,
		&i.JoinedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
	)
	return &i, err
}

const updateEmployee = `-- name: UpdateEmployee :one
update employees
set
    name = coalesce($1, name),
    dob = coalesce($2, dob),
    department = coalesce($3, department),
    job_title = coalesce($4, job_title),
    address = coalesce($5, address),
    joined_at = coalesce($6, joined_at),
    department_id = coalesce($7, department_id)
where id = $8
returning id, name, dob, department, job_title, address, joined_at, created_at, updated_at, department_id
`

type UpdateEmployeeParams struct {
	Name         string      `db:"name"`
	Dob          pgtype.Date `db:"dob"`
	Department   string      `db:"department"`
	JobTitle     string      `db:"job_title"`
	Address      string      `db:"address"`
	JoinedAt     time.Time   `db:"joined_at"`
	DepartmentID pgtype.Text `db:"department_id"`
	ID           uuid.UUID   `db:"id"`
}

// name = coalesce(sqlc.narg('name'), name),
// dob = coalesce(sqlc.narg('dob'), dob),
// department = coalesce(sqlc.narg('department'), department),
// job_title = coalesce(sqlc.narg('job_title'), job_title),
// address = coalesce(sqlc.narg('address'), address),
// joined_at = coalesce(sqlc.narg('joined_at'), joined_at)
func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (*Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployee,
		arg.Name,
		arg.Dob,
		arg.Department,
		arg.JobTitle,
		arg.Address,
		arg.JoinedAt,
		arg.DepartmentID,
		arg.ID,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Department,
		&i.JobTitle,
		&i.Address,
		&i.JoinedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
	)
	return &i, err
}
